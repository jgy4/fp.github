{
  
    
        "post0": {
            "title": "Creating Effective Visualizations",
            "content": "The Task . In this blog post we will explore and understand malaria with three informative visualizations. The malaria data came from this github: https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13. . Plotly . I chose to use plotly for my visualizations because it was easily integrated into Jupyter notebook. Plotly allows you to easily create interactive visualizations using python. I found it to be straightforward and easily customizable. . Load Data . import pandas as pd import plotly.express as px . . df_inc = pd.read_csv(&#39;malaria_inc.csv&#39;) df_deaths = pd.read_csv(&#39;malaria_deaths.csv&#39;) df_deaths_age = pd.read_csv(&#39;malaria_deaths_age.csv&#39;) #Make df for values within income vars income_set = [&#39;Early-demographic dividend&#39;,&#39;Low &amp; middle income&#39;,&#39;Low income&#39;,&#39;Lower middle income&#39;,&#39;Middle income&#39;,&#39;Upper Middle Income&#39;] df_inc_only = df_inc[df_inc[&#39;Entity&#39;].isin(income_set)] . Malaria Cases By Country . This first visualization shows how many cases of malaria are occurring per 1,000 people in countries around the world from 2000 - 2015. We see that the countries with the most cases of malaria are concentrated in Africa, South America, and Southeast Asia. Especially in Africa, almost all countries are experiencing 12 cases per 1,000 population. We also notice that some countries have reduced their case numbers from 2000 to 2015. . fig = px.choropleth(df_inc, locations=&#39;Code&#39;, color=&#39;Incidence of malaria (per 1,000 population at risk) (per 1,000 population at risk)&#39;, color_continuous_scale=&quot;blues&quot;, range_color=(0, 12), scope=&quot;world&quot;, labels={&#39;Incidence of malaria (per 1,000 population at risk) (per 1,000 population at risk)&#39;:&#39;Cases per 1,000&#39;}, title=&quot;Malaria Cases By Country&quot;, animation_frame=&quot;Year&quot; ) fig.update_geos(projection_type=&quot;natural earth&quot;) #fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . . Malaria Deaths by Country . In this second visualization we look at how many malaria deaths are occuring in each country. The metric changes to deaths per 100,000 people. We see that most malaria deaths are concentrated in the African continent and some small parts of Southeast Asia. Many African countries are experiencing 12 deaths per 100,000 people. . fig = px.choropleth(df_deaths, locations=&#39;Code&#39;, color=&#39;Deaths - Malaria - Sex: Both - Age: Age-standardized (Rate) (per 100,000 people)&#39;, color_continuous_scale=&quot;blues&quot;, range_color=(0, 12), scope=&quot;world&quot;, labels={&#39;Deaths - Malaria - Sex: Both - Age: Age-standardized (Rate) (per 100,000 people)&#39;:&#39;Deaths per 100,000&#39;}, title=&quot;Malaria Deaths By Country&quot; ) #fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.update_geos(projection_type=&quot;natural earth&quot;) fig.show() . . Malaria Deaths in Africa 1990-2016 . In this third visualization we look at malaria deaths in African countries from 1990 - 2016. Because the malaria cases and deaths were both concentrated in African countries, this visualizations explores African countries across individual years. We see that malaria deaths worsened in the late 90&#39;s and early 2000&#39;s for the continent. . fig = px.choropleth(df_deaths, locations=&#39;Code&#39;, color=&#39;Deaths - Malaria - Sex: Both - Age: Age-standardized (Rate) (per 100,000 people)&#39;, color_continuous_scale=&quot;blues&quot;, range_color=(0, 12), scope=&quot;africa&quot;,animation_frame=&quot;Year&quot;, labels={&#39;Deaths - Malaria - Sex: Both - Age: Age-standardized (Rate) (per 100,000 people)&#39;:&#39;Deaths per 100,000&#39;}, title=&quot;Malaria Deaths in Africa 1990-2016&quot; ) #fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig[&quot;layout&quot;].pop(&quot;updatemenus&quot;) # optional, drop animation buttons fig.show() . .",
            "url": "https://jgy4.github.io/fp.github/2021/09/29/Creating-Effective-Visualizations.html",
            "relUrl": "/2021/09/29/Creating-Effective-Visualizations.html",
            "date": " • Sep 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Number Theory",
            "content": "In the blog post below, I will outline my solution to a twist on a Google recruitment question. In solving the problem, I rely on smaller helper functions. I also implement unit testing for each helper function and my overall function. . The Problem . We are asked to find the first 10-digit prime in the decimal expansion of 17$ pi$. . The first 5 digits in the decimal expansion of $ pi$ are 14159. The first 4-digit prime in the decimal expansion of $ pi$ are 4159. We are asked to find the first 10-digit prime in the decimal expansion of 17$ pi$. . To accomplish this we use three helper functions to: . Generate a large decimal expansion of any number | Check if a number is prime | Generate sliding windows of a specified width from a long iterable | Generating a Large Decimal Expansion . In this first helper function we want to generate a large decimal expansion of any given number. To do this, we use the mpmath library. The function, called &quot;num_times&quot;, takes in the number we wish to expand, the number of digits we desire for the expansion, and a multiplier called &quot;times&quot;. The function notes the number of desired digits, and then return the decimal expansion of that number, multiplied by the multiplier. . Below the function we have a unit test. The test shows that our function can correctly expand pi to 3.14159. The second part of the test shows that it can multiply and create much larger expansions with the 100-digit expansion of $17 pi$. . from mpmath import * &quot;&quot;&quot; Write a function generate a large decimal expansion of any number (like pi) &quot;&quot;&quot; def num_times(num, digits, times): &quot;&quot;&quot; set number of digits using input &quot;&quot;&quot; mp.dps = digits &quot;&quot;&quot; multiply the number by the desired constant from input &quot;&quot;&quot; return(str(times*num)) . &quot;&quot;&quot; Unit Test &quot;&quot;&quot; &quot;&quot;&quot; 6 digit expansion of pi should be 3.14159 &quot;&quot;&quot; print(num_times(mp.pi,6,1)) &quot;&quot;&quot; 100 digit expansion of 17 pi should be 53.___ &quot;&quot;&quot; print(num_times(mp.pi,100,17)) . 3.14159 53.40707511102648505386493751575154903135187978937679895657405806923287890686555297667659203081599016 . Checking if a Number is Prime . In this second helper function we want to take a given number and return whether or not it is prime. To do this, we begin with the factor 2. While x, our number of interest, is greater than or equal to the square of our factor we want to check of x in divisible by our factor. If x is divisible by the factor, then we return False. If x isn&#39;t divisible by the factor, then we increase the factor by 1 and go through the while loop again. Once x is not greater than the square of our factor, we know we have explored all possible factors, and we can declare the number a prime number. . Below the function we have a unit test. The test shows that our function correctly identify prime numbers. Our function identifies 5 as prime, 8 as not prime, and 17 as prime. . &quot;&quot;&quot; Write a function to check if a number is prime &quot;&quot;&quot; def is_prime_num(x): p = 2 &quot;&quot;&quot; Check if x is greater than or equal to the square of p &quot;&quot;&quot; while (p*p &lt;= x): &quot;&quot;&quot; Check if x is divisible by the factor, p &quot;&quot;&quot; if (x%p == 0): &quot;&quot;&quot; If x is divisible, it is not prime - return False &quot;&quot;&quot; return False else: p+=1 &quot;&quot;&quot; Once we&#39;ve checked all possible factors - return True &quot;&quot;&quot; return True . &quot;&quot;&quot; Unit test &quot;&quot;&quot; &quot;&quot;&quot; Is 5 a prime number? True &quot;&quot;&quot; print(is_prime_num(5)) &quot;&quot;&quot; Is 8 a prime number ? False &quot;&quot;&quot; print(is_prime_num(8)) &quot;&quot;&quot; Is 17 a prime number? True &quot;&quot;&quot; print(is_prime_num(17)) . True False True . Generating Sliding Windows of a Specified Width . In this third helper function we want to take in a long string and return a list of sliding windows. We want the sliding windows to be of the specified length, n. We begin by creating an empty list called windows, and cleaning the input string of any decimal points. Then, we loop through each character in the string except for the last n, to avoid going past the end of the string. We add a window of length n to our list, windows. Once the loop ends, we return windows. . Below the function we have a unit test. The test shows our function can return sliding windows of size 5 for &#39;abcdefghijklmnop&#39; and sliding windows of size 7 for the decimal &#39;5.467892346&#39;. . &quot;&quot;&quot; Write a function to generate sliding windows of a specified width from a long iterable &quot;&quot;&quot; def slide_n(n,long_str): windows = [] &quot;&quot;&quot; Clean string of decimal points &quot;&quot;&quot; long_str = long_str.replace(&#39;.&#39;, &#39;&#39;) &quot;&quot;&quot; Loop through each character, until n before the end of the string &quot;&quot;&quot; for i in range(0,len(long_str)-(n-1)): &quot;&quot;&quot; Add sliding window of size n to windows &quot;&quot;&quot; temp_str = long_str[i:i+n] windows.append(temp_str) &quot;&quot;&quot; Return windows &quot;&quot;&quot; return windows . &quot;&quot;&quot; Unit Test &quot;&quot;&quot; &quot;&quot;&quot; Can we create sliding ranges of 5 letters for the first part of alphabet? &quot;&quot;&quot; print(slide_n(5,&#39;abcdefghijklmnop&#39;)) &quot;&quot;&quot; Can we create sliding ranges of 5 numbers for a decimal? &quot;&quot;&quot; print(slide_n(7,&#39;5.467892346&#39;)) . [&#39;abcde&#39;, &#39;bcdef&#39;, &#39;cdefg&#39;, &#39;defgh&#39;, &#39;efghi&#39;, &#39;fghij&#39;, &#39;ghijk&#39;, &#39;hijkl&#39;, &#39;ijklm&#39;, &#39;jklmn&#39;, &#39;klmno&#39;, &#39;lmnop&#39;] [&#39;5467892&#39;, &#39;4678923&#39;, &#39;6789234&#39;, &#39;7892346&#39;] . Find The First n-digit Prime in The Decimal Expansion of a Number . In our final function we use all of our helper functions to solve our question of interest - finding the first 10-digit prime number in the decimal expansion of $17 pi$. Our function can find the first n-digit prime in the decimal expansion of a number. The function takes as input: the number (ex. $ pi$), any multipliers for the number (ex. 17), the desired window length (ex. 10), and the desired decimal expansion length (ex. 1000). The function first calls num_time to generate the full decimal expansion of the desired number. Then, we feed the window length and full decimal expansion to slide_n to generate our list of sliding windows. Finally, we loop through our sliding windows, checking if each is prime, and return the first prime number we find. If we don&#39;t find any primes after looping through all windows, we return a string encouraging the user to try a longer decimal expansion. . Below our function we have unit test, seeking the first ten digit prime in the decimal expansion of e (7427466391). We begin by testing a decimal expansion of 100, but find we need a longer decimal expansion. With a decimal expansion of 1000 we see our function returns the correct answer. . Fianlly, we are able to answer our initial question below our unit test. The first 10-digit prime in the decimal expansion of $17 pi$ is &#39;8649375157&#39;. . &quot;&quot;&quot; Find the first n-digit prime in the decimal expansion of a number. &quot;&quot;&quot; def first_n_prime(num,multiplier,window,dec_length): &quot;&quot;&quot; Get the full decimal expansion of the number &quot;&quot;&quot; full_str = num_times(num,dec_length,multiplier) &quot;&quot;&quot; Create the sliding windows of size n &quot;&quot;&quot; windows = slide_n(window,full_str) &quot;&quot;&quot; Loop through all windows &quot;&quot;&quot; for i in range(0,len(windows)): &quot;&quot;&quot; Check if each window is prime, and return the first prime found &quot;&quot;&quot; if (is_prime_num(int(windows[i]))): return windows[i] else: continue &quot;&quot;&quot; If no primes were found, return a message to the user &quot;&quot;&quot; return str(&quot;Try a longer decimal expansion.&quot;) . &quot;&quot;&quot; Unit Test &quot;&quot;&quot; &quot;&quot;&quot; Search for first ten digit prime of e - with only 100 decimals we do not find it &quot;&quot;&quot; y = first_n_prime(mp.e,1,10,100) &quot;&quot;&quot; First ten digit prime of e should be 7427466391, we find it with 1000 decimals &quot;&quot;&quot; z = first_n_prime(mp.e,1,10,1000) print(z) . 7427466391 . &quot;&quot;&quot; Answer our original question: First 10-digit prime in the decimal expansion of 17 pi &quot;&quot;&quot; first_n_prime(mp.pi,17,10,1000) . &#39;8649375157&#39; . &quot;&quot;&quot; Check that it is prime &quot;&quot;&quot; is_prime_num(8649375157) . True .",
            "url": "https://jgy4.github.io/fp.github/2021/09/16/Number-Theory.html",
            "relUrl": "/2021/09/16/Number-Theory.html",
            "date": " • Sep 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Math Is Fun - Solving Problems From The Euler Project",
            "content": "In the blog below I will outline my solutions to three problems from The Euler project. The first, being the easiest, has been solved by less than 500,000 people. The second has been solved by less than 100,000 people. The third has been solved by less than 25,000 people. The problems are numbered as they appear on The Euler Project site https://projecteuler.net/archives. . Problem 6 - Sum Square Difference . Solved By 496,296 . https://projecteuler.net/problem=6 . We are asked to find the difference between the &quot;sum of the squares&quot; of the first one hundred natural numbers and the &quot;square of the sum&quot; of the first one hundred natural numbers. . For example, the &quot;sum of the squares&quot; of the first ten natural numbers is: $$1^2 + 2^2 + ... + 10^2 = 385$$ . The &quot;square of the sum&quot; of the first 10 natural numbers is: $$(1+2+...+10)^2 = 55^2 = 3025$$ . The function I used to obtain my solution is below. I forst compute the sum of squares. I begin by looping through the specified amount of natural numbers, in this case 100, and totaling the square of each number. Then, I compute the square of the sum by looping through the 100 natural numbers. I add them all together and square the total. Lastly, the function returns the difference by subtracting the two. Our answer is 25,164,150. . def sum_square_diff(num): &quot;&quot;&quot; Compute the sum of the squares Begin with sum_s equaling zero, and add each natural number squared. &quot;&quot;&quot; sum_s = 0 for i in range(1,num+1): sum_s += i**2 &quot;&quot;&quot; Compute the square of the sum Begin with sum_s equaling zero, and add each natural number. Square the sum at the end. &quot;&quot;&quot; s_sum = 0 for j in range(1,num+1): s_sum += j s_sum = s_sum**2 &quot;&quot;&quot; Return the difference by subtracting &quot;&quot;&quot; return(s_sum - sum_s) . &quot;&quot;&quot; Our answer for the first 100 natural numbers is shown below. &quot;&quot;&quot; sum_square_diff(100) . 25164150 . Problem 27 - Quadratic Primes . Solved by 88,173 . https://projecteuler.net/problem=27 . Considering quadratics of the form: $$n^2+an+b, |a|&lt;1000, |b| leq1000$$ We are asked to find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n=0$. . For example, there is a formula: $$n^2 - 79n +1601$$ Which produces 80 primes for the consecutive values $0 leq n leq 79$. The product of the coefficients, -79 and 1601, is -126,479. . My code solution is shown below. I begin by creating a helper function that checks if a number is a prime. The main function, called quad_primes, loops through all possible values of a and b. For each possible value of a and b, the function checks if the result is a prime number. If the result is a prime number, then a while loop continues to increment n until the result is no longer prime. The function records the max count of prime numbers and the a and b values associated with that max count. The coefficients with the maximum number of primes for consecutive values of n are $a=-61$ and $b=971$. The product of these two coefficients is -59,231. . &quot;&quot;&quot; Check if a number is prime. &quot;&quot;&quot; def check_prime(num): &quot;&quot;&quot; Prime numbers must be &gt; 1. &quot;&quot;&quot; if (num &gt; 1): for i in range(2,num): &quot;&quot;&quot; If number is divisible by anything, it&#39;s not prime. &quot;&quot;&quot; if (num % i) == 0: return False return True else: return False . def quad_primes(a_max,b_max): &quot;&quot;&quot; Begin with a, b, and count values at zero. &quot;&quot;&quot; prime_num = 1 best_a = 0 best_b = 0 max_count = 0 &quot;&quot;&quot; Loop through all possible values of a and b. &quot;&quot;&quot; for a in range(-999,a_max+1): for b in range(-1000,b_max+1): n = 0 count = 0 prime_num = b &quot;&quot;&quot; For the set (a,b) - track the count of consecutive primes. &quot;&quot;&quot; while(check_prime(prime_num)): count += 1 n += 1 prime_num = n**2 + (a*n) + b &quot;&quot;&quot; Check if count is higher than all other counts, and save values. &quot;&quot;&quot; if(count &gt; max_count): best_a = a best_b = b max_count = count return([max_count,best_a,best_b,best_a * best_b]) . var = quad_primes(999,1000) . print(&#39;The max count of prime numbers is {}&#39;.format(var[0])) print(&#39;The value of a is {}.&#39;.format(var[1])) print(&#39;The value of b is {}.&#39;.format(var[2])) print(&#39;The product of a and b is {}&#39;.format(var[3])) . . The max count of prime numbers is 71 The value of a is -61. The value of b is 971. The product of a and b is -59231 . Problem 85 - Counting Rectangles . Solved by 24,609 . https://projecteuler.net/problem=85 . Although there exists no rectangular grid that contains exactly two million rectangles, find the area of the grid with the nearest solution. . For example, a 3x2 grid contains 18 rectangles. . The brute force solution is pretty easy to derive. If the grid is X long and Y high, we want to find rectangles with sides which are 1≤x≤X and 1≤y≤Y. . In case are looking for rectangles of size MxN there will be (X-M+1)*(Y-N+1) possible ways to place that rectangles. . We begin with a helper function called num_rect that counts how many rectangles are contained in an (X,Y) grid. This helper function loops through all possible rectangle shapes. For each rectangle of size HxW, the grid contains $(X-h+1)*(Y-W+1)$ of those rectangles. . The main function, called count_rect, takes the goal number of rectangles as input. Then the function loops through possible dimensions for a grid. For each grid, the total number of rectangles is calculated. We save the grid that&#39;s closest to our goal number of rectangles. The closest we could get to 2,000,000 rectangles is 1,999,998 with a 36x77 grid. . &quot;&quot;&quot; Calculate the total number of rectangles in an (X,Y) grid. &quot;&quot;&quot; def num_rect(X,Y): num_rect = 0 for h in range(1,X+1): for w in range(1,Y+1): &quot;&quot;&quot; We add to the total with each size of rectangle (h,w). &quot;&quot;&quot; num_rect += (X - h + 1)*(Y - w + 1) return num_rect . import numpy as np def count_rect(goal): best_h = 0 best_w = 0 best_diff = goal &quot;&quot;&quot; Loop through possible grid values. &quot;&quot;&quot; for i in range(0,200): for j in range(i,200): &quot;&quot;&quot; If grid is closest to goal, save values. &quot;&quot;&quot; if (np.abs(goal - num_rect(i,j)) &lt; best_diff): best_diff = np.abs(goal - num_rect(i,j)) best_h = i best_w = j return[best_h,best_w,num_rect(best_h,best_w)] . result = count_rect(2000000) print(&#39;The closest we could get to 2,000,000 rectangles is {}&#39;.format(result[2])) print(&#39;The size of the grid with {} rectangles is {}x{}.&#39;.format(result[2],result[0],result[1])) . . The closest we could get to 2,000,000 rectangles is 1999998 The size of the grid with 1999998 rectangles is 36x77. .",
            "url": "https://jgy4.github.io/fp.github/2021/09/01/Math-Is-Fun.html",
            "relUrl": "/2021/09/01/Math-Is-Fun.html",
            "date": " • Sep 1, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jgy4.github.io/fp.github/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jgy4.github.io/fp.github/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jgy4.github.io/fp.github/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}