{
  
    
        "post0": {
            "title": "Math Is Fun - Solving Problems From The Euler Project",
            "content": "In the blog below I will outline my solutions to three problems from The Euler project. The first, being the easiest, has been solved by less than 500,000 people. The second has been solved by less than 100,000 people. The third has been solved by less than 25,000 people. The problems are numbered as they appear on The Euler Project site https://projecteuler.net/archives. . Problem 6 - Sum Square Difference . Solved By 496,296 . https://projecteuler.net/problem=6 . We are asked to find the difference between the &quot;sum of the squares&quot; of the first one hundred natural numbers and the &quot;square of the sum&quot; of the first one hundred natural numbers. . For example, the &quot;sum of the squares&quot; of the first ten natural numbers is: $$1^2 + 2^2 + ... + 10^2 = 385$$ . The &quot;square of the sum&quot; of the first 10 natural numbers is: $$(1+2+...+10)^2 = 55^2 = 3025$$ . The function I used to obtain my solution is below. I forst compute the sum of squares. I begin by looping through the specified amount of natural numbers, in this case 100, and totaling the square of each number. Then, I compute the square of the sum by looping through the 100 natural numbers. I add them all together and square the total. Lastly, the function returns the difference by subtracting the two. Our answer is 25,164,150. . def sum_square_diff(num): &quot;&quot;&quot; Compute the sum of the squares Begin with sum_s equaling zero, and add each natural number squared. &quot;&quot;&quot; sum_s = 0 for i in range(1,num+1): sum_s += i**2 &quot;&quot;&quot; Compute the square of the sum Begin with sum_s equaling zero, and add each natural number. Square the sum at the end. &quot;&quot;&quot; s_sum = 0 for j in range(1,num+1): s_sum += j s_sum = s_sum**2 &quot;&quot;&quot; Return the difference by subtracting &quot;&quot;&quot; return(s_sum - sum_s) . &quot;&quot;&quot; Our answer for the first 100 natural numbers is shown below. &quot;&quot;&quot; sum_square_diff(100) . 25164150 . Problem 27 - Quadratic Primes . Solved by 88,173 . https://projecteuler.net/problem=27 . Considering quadratics of the form: $$n^2+an+b, |a|&lt;1000, |b| leq1000$$ We are asked to find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n=0$. . For example, there is a formula: $$n^2 - 79n +1601$$ Which produces 80 primes for the consecutive values $0 leq n leq 79$. The product of the coefficients, -79 and 1601, is -126,479. . My code solution is shown below. I begin by creating a helper function that checks if a number is a prime. The main function, called quad_primes, loops through all possible values of a and b. For each possible value of a and b, the function checks if the result is a prime number. If the result is a prime number, then a while loop continues to increment n until the result is no longer prime. The function records the max count of prime numbers and the a and b values associated with that max count. The coefficients with the maximum number of primes for consecutive values of n are $a=-61$ and $b=971$. The product of these two coefficients is -59,231. . &quot;&quot;&quot; Check if a number is prime. &quot;&quot;&quot; def check_prime(num): &quot;&quot;&quot; Prime numbers must be &gt; 1. &quot;&quot;&quot; if (num &gt; 1): for i in range(2,num): &quot;&quot;&quot; If number is divisible by anything, it&#39;s not prime. &quot;&quot;&quot; if (num % i) == 0: return False return True else: return False . def quad_primes(a_max,b_max): &quot;&quot;&quot; Begin with a, b, and count values at zero. &quot;&quot;&quot; prime_num = 1 best_a = 0 best_b = 0 max_count = 0 &quot;&quot;&quot; Loop through all possible values of a and b. &quot;&quot;&quot; for a in range(-999,a_max+1): for b in range(-1000,b_max+1): n = 0 count = 0 prime_num = b &quot;&quot;&quot; For the set (a,b) - track the count of consecutive primes. &quot;&quot;&quot; while(check_prime(prime_num)): count += 1 n += 1 prime_num = n**2 + (a*n) + b &quot;&quot;&quot; Check if count is higher than all other counts, and save values. &quot;&quot;&quot; if(count &gt; max_count): best_a = a best_b = b max_count = count return([max_count,best_a,best_b,best_a * best_b]) . var = quad_primes(999,1000) . print(&#39;The max count of prime numbers is {}&#39;.format(var[0])) print(&#39;The value of a is {}.&#39;.format(var[1])) print(&#39;The value of b is {}.&#39;.format(var[2])) print(&#39;The product of a and b is {}&#39;.format(var[3])) . . The max count of prime numbers is 71 The value of a is -61. The value of b is 971. The product of a and b is -59231 . Problem 85 - Counting Rectangles . Solved by 24,609 . https://projecteuler.net/problem=85 . Although there exists no rectangular grid that contains exactly two million rectangles, find the area of the grid with the nearest solution. . For example, a 3x2 grid contains 18 rectangles. . The brute force solution is pretty easy to derive. If the grid is X long and Y high, we want to find rectangles with sides which are 1≤x≤X and 1≤y≤Y. . In case are looking for rectangles of size MxN there will be (X-M+1)*(Y-N+1) possible ways to place that rectangles. . We begin with a helper function called num_rect that counts how many rectangles are contained in an (X,Y) grid. This helper function loops through all possible rectangle shapes. For each rectangle of size HxW, the grid contains $(X-h+1)*(Y-W+1)$ of those rectangles. . The main function, called count_rect, takes the goal number of rectangles as input. Then the function loops through possible dimensions for a grid. For each grid, the total number of rectangles is calculated. We save the grid that&#39;s closest to our goal number of rectangles. The closest we could get to 2,000,000 rectangles is 1,999,998 with a 36x77 grid. . &quot;&quot;&quot; Calculate the total number of rectangles in an (X,Y) grid. &quot;&quot;&quot; def num_rect(X,Y): num_rect = 0 for h in range(1,X+1): for w in range(1,Y+1): &quot;&quot;&quot; We add to the total with each size of rectangle (h,w). &quot;&quot;&quot; num_rect += (X - h + 1)*(Y - w + 1) return num_rect . import numpy as np def count_rect(goal): best_h = 0 best_w = 0 best_diff = goal &quot;&quot;&quot; Loop through possible grid values. &quot;&quot;&quot; for i in range(0,200): for j in range(i,200): &quot;&quot;&quot; If grid is closest to goal, save values. &quot;&quot;&quot; if (np.abs(goal - num_rect(i,j)) &lt; best_diff): best_diff = np.abs(goal - num_rect(i,j)) best_h = i best_w = j return[best_h,best_w,num_rect(best_h,best_w)] . result = count_rect(2000000) print(&#39;The closest we could get to 2,000,000 rectangles is {}&#39;.format(result[2])) print(&#39;The size of the grid with {} rectangles is {}x{}.&#39;.format(result[2],result[0],result[1])) . . The closest we could get to 2,000,000 rectangles is 1999998 The size of the grid with 1999998 rectangles is 36x77. .",
            "url": "https://jgy4.github.io/fp.github/2021/09/01/Math-Is-Fun.html",
            "relUrl": "/2021/09/01/Math-Is-Fun.html",
            "date": " • Sep 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jgy4.github.io/fp.github/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jgy4.github.io/fp.github/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jgy4.github.io/fp.github/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}